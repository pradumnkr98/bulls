{"version":3,"file":"react-loading-overlay-ts.cjs.development.js","sources":["../src/components/Spinner.tsx","../src/styles.tsx","../src/index.tsx"],"sourcesContent":["import React from 'react';\nimport { css } from '@emotion/css';\n\nexport type SpinnerProps = {\n  getStyles: (key: string) => TemplateStringsArray;\n  cx: (name: string, arg2: any) => string;\n};\n\nconst Spinner: React.FC<SpinnerProps> = props => (\n  <div className={props.cx('spinner', css(props.getStyles('spinner')))}>\n    <svg viewBox=\"25 25 50 50\">\n      <circle\n        cx=\"50\"\n        cy=\"50\"\n        r=\"20\"\n        fill=\"none\"\n        strokeWidth=\"2\"\n        strokeMiterlimit=\"10\"\n      />\n    </svg>\n  </div>\n);\n\nexport default Spinner;\n","import { CSSInterpolation, keyframes } from '@emotion/css';\nimport { TransitionStatus } from 'react-transition-group/Transition';\n\nimport { LoadingOverLayProps, OverflowCSS } from './LoadingOverlayTypes';\n\nconst rotate360 = keyframes`\n  from {\n    transform: rotate(0deg);\n  }\n  to {\n    transform: rotate(360deg);\n  }\n`;\n\nconst spinnerDash = keyframes`\n  0% {\n    stroke-dasharray: 1,200;\n    stroke-dashoffset: 0;\n  }\n  50% {\n    stroke-dasharray: 89,200;\n    stroke-dashoffset: -35px;\n  }\n  100% {\n    stroke-dasharray: 89,200;\n    stroke-dashoffset: -124px;\n  }\n`;\n\nexport type StyleKeys = 'wrapper' | 'overlay' | 'content' | 'spinner';\n\nexport type Styles<StateType = any> = {\n  [key in StyleKeys]: (\n    state: StateType,\n    props?: LoadingOverLayProps\n  ) => CSSInterpolation | TemplateStringsArray;\n};\n\nconst styles: Styles = {\n  wrapper: (state: OverflowCSS) => ({\n    position: 'relative',\n    ...state,\n  }),\n  overlay(state: TransitionStatus, props?: LoadingOverLayProps) {\n    return {\n      position: 'absolute',\n      height: '100%',\n      width: '100%',\n      top: '0px',\n      left: '0px',\n      display: 'flex',\n      textAlign: 'center',\n      fontSize: '1.2em',\n      color: '#FFF',\n      backgroundColor: 'rgba(0, 0, 0, 0.7)',\n      zIndex: 800,\n      transition: `opacity ${props?.fadeSpeed ?? 500}ms ease-in`,\n      opacity: state === 'entering' || state === 'entered' ? 1 : 0,\n    };\n  },\n  content: () => ({\n    margin: 'auto',\n  }),\n  spinner: () => ({\n    position: 'relative',\n    margin: '0px auto 10px auto',\n    width: '50px',\n    maxHeight: '100%',\n    '&:before': {\n      content: '\"\"',\n      display: 'block',\n      paddingTop: '100%',\n    },\n    '& svg': {\n      animation: `${rotate360} 2s linear infinite`,\n      height: '100%',\n      transformOrigin: 'center center',\n      width: '100%',\n      position: 'absolute',\n      top: '0',\n      bottom: '0',\n      left: '0',\n      right: '0',\n      margin: 'auto',\n      '& circle': {\n        animation: `${spinnerDash} 1.5s ease-in-out infinite`,\n        strokeDasharray: '1,200',\n        strokeDashoffset: 0,\n        strokeLinecap: 'round',\n        stroke: '#FFF',\n      },\n    },\n  }),\n};\n\nexport default styles;\n","import React, { createRef, forwardRef, PureComponent } from 'react';\nimport { CSSTransition } from 'react-transition-group';\nimport { css, CSSInterpolation, cx } from '@emotion/css';\nimport { TransitionStatus } from 'react-transition-group/Transition';\n\nimport Spinner, { SpinnerProps } from './components/Spinner';\n\nimport STYLES, { Styles } from './styles';\nimport {\n  LoadingOverLayProps,\n  LoadingOverlayState,\n  OverflowCSS,\n} from './LoadingOverlayTypes';\n\nexport { LoadingOverLayProps } from './LoadingOverlayTypes';\n\nclass LoadingOverlayWrapperBase extends PureComponent<\n  LoadingOverLayProps,\n  LoadingOverlayState\n> {\n  static displayName = 'LoadingOverlay';\n\n  wrapperEl: HTMLElement | null | undefined = null;\n\n  overlayRef = createRef<HTMLDivElement>();\n\n  state = { overflowCSS: undefined };\n\n  componentDidMount() {\n    this.wrapperEl = this.overlayRef.current?.parentElement;\n    if (this.wrapperEl !== null && this.wrapperEl !== undefined) {\n      const wrapperStyle = window.getComputedStyle(this.wrapperEl);\n      const overflowCSS = (['overflow', 'overflowX', 'overflowY'] as Array<\n        keyof OverflowCSS\n      >).reduce<OverflowCSS>((m, i) => {\n        if (wrapperStyle[i] !== 'visible') m[i] = 'hidden';\n        return m;\n      }, {} as OverflowCSS);\n      this.setState({ overflowCSS });\n    }\n  }\n\n  componentDidUpdate(prevProps: LoadingOverLayProps) {\n    const { active } = this.props;\n    if (active !== prevProps.active && this.wrapperEl) {\n      this.wrapperEl.scrollTop = 0;\n    }\n  }\n\n  /**\n   * Return an emotion css object for a given element key\n   * If a custom style was provided via props, run it with\n   * the base css obj.\n   */\n  getStyles = (\n    key: keyof Styles,\n    providedState?: OverflowCSS | TransitionStatus\n  ) => {\n    const { styles = {} } = this.props;\n    const base = STYLES[key](providedState, this.props);\n    const custom: Styles[keyof Styles] = (styles as Styles)[key] ?? false;\n    if (!custom) return base;\n    return (typeof custom === 'function'\n      ? custom(base, this.props)\n      : custom) as CSSInterpolation | TemplateStringsArray;\n  };\n\n  /**\n   * Convenience cx wrapper to add prefix classes to each of the child\n   * elements for styling purposes.\n   */\n  cx = (names: string | Array<string | false | undefined>, ...args: any) => {\n    const { classNamePrefix = '_loading_overlay_' } = this.props;\n    const arr = Array.isArray(names) ? names : [names];\n    return cx(\n      ...arr.map(name => (name ? `${classNamePrefix}${name}` : '')),\n      ...args\n    );\n  };\n\n  render() {\n    const { overflowCSS } = this.state;\n    const {\n      children,\n      className,\n      onClick,\n      active,\n      fadeSpeed = 500,\n      spinner = true,\n      text,\n      innerRef,\n    } = this.props;\n\n    return (\n      <div\n        data-testid=\"wrapper\"\n        ref={innerRef}\n        className={this.cx(\n          ['wrapper', active && 'wrapper--active'],\n          css(\n            this.getStyles(\n              'wrapper',\n              active ? overflowCSS : undefined\n            ) as CSSInterpolation\n          ),\n          className\n        )}\n      >\n        <CSSTransition\n          in={active}\n          classNames=\"_loading-overlay-transition\"\n          timeout={fadeSpeed!}\n          unmountOnExit\n        >\n          {state => (\n            <div\n              ref={this.overlayRef}\n              data-testid=\"overlay\"\n              className={this.cx(\n                'overlay',\n                css(this.getStyles('overlay', state) as CSSInterpolation)\n              )}\n              onClick={onClick}\n            >\n              <div\n                className={this.cx(\n                  'content',\n                  css(this.getStyles('content') as CSSInterpolation)\n                )}\n              >\n                {spinner &&\n                  (typeof spinner === 'boolean' ? (\n                    <Spinner\n                      cx={this.cx}\n                      getStyles={this.getStyles as SpinnerProps['getStyles']}\n                    />\n                  ) : (\n                    spinner\n                  ))}\n                {text}\n              </div>\n            </div>\n          )}\n        </CSSTransition>\n        {children}\n      </div>\n    );\n  }\n}\n\nconst LoadingOverlayWrapper = forwardRef<HTMLDivElement, LoadingOverLayProps>(\n  (props, ref) => <LoadingOverlayWrapperBase innerRef={ref} {...props} />\n);\n\nexport default LoadingOverlayWrapper;\n"],"names":["Spinner","props","React","className","cx","css","getStyles","viewBox","cy","r","fill","strokeWidth","strokeMiterlimit","rotate360","keyframes","spinnerDash","styles","wrapper","state","position","overlay","height","width","top","left","display","textAlign","fontSize","color","backgroundColor","zIndex","transition","fadeSpeed","opacity","content","margin","spinner","maxHeight","paddingTop","animation","transformOrigin","bottom","right","strokeDasharray","strokeDashoffset","strokeLinecap","stroke","LoadingOverlayWrapperBase","createRef","overflowCSS","undefined","key","providedState","base","STYLES","custom","names","classNamePrefix","arr","Array","isArray","args","map","name","componentDidMount","wrapperEl","overlayRef","current","parentElement","wrapperStyle","window","getComputedStyle","reduce","m","i","setState","componentDidUpdate","prevProps","active","scrollTop","render","children","onClick","text","innerRef","ref","CSSTransition","classNames","timeout","unmountOnExit","PureComponent","LoadingOverlayWrapper","forwardRef"],"mappings":"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"}