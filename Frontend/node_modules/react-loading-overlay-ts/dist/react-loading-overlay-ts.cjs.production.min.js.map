{"version":3,"file":"react-loading-overlay-ts.cjs.production.min.js","sources":["../src/components/Spinner.tsx","../src/styles.tsx","../src/index.tsx"],"sourcesContent":["import React from 'react';\nimport { css } from '@emotion/css';\n\nexport type SpinnerProps = {\n  getStyles: (key: string) => TemplateStringsArray;\n  cx: (name: string, arg2: any) => string;\n};\n\nconst Spinner: React.FC<SpinnerProps> = props => (\n  <div className={props.cx('spinner', css(props.getStyles('spinner')))}>\n    <svg viewBox=\"25 25 50 50\">\n      <circle\n        cx=\"50\"\n        cy=\"50\"\n        r=\"20\"\n        fill=\"none\"\n        strokeWidth=\"2\"\n        strokeMiterlimit=\"10\"\n      />\n    </svg>\n  </div>\n);\n\nexport default Spinner;\n","import { CSSInterpolation, keyframes } from '@emotion/css';\nimport { TransitionStatus } from 'react-transition-group/Transition';\n\nimport { LoadingOverLayProps, OverflowCSS } from './LoadingOverlayTypes';\n\nconst rotate360 = keyframes`\n  from {\n    transform: rotate(0deg);\n  }\n  to {\n    transform: rotate(360deg);\n  }\n`;\n\nconst spinnerDash = keyframes`\n  0% {\n    stroke-dasharray: 1,200;\n    stroke-dashoffset: 0;\n  }\n  50% {\n    stroke-dasharray: 89,200;\n    stroke-dashoffset: -35px;\n  }\n  100% {\n    stroke-dasharray: 89,200;\n    stroke-dashoffset: -124px;\n  }\n`;\n\nexport type StyleKeys = 'wrapper' | 'overlay' | 'content' | 'spinner';\n\nexport type Styles<StateType = any> = {\n  [key in StyleKeys]: (\n    state: StateType,\n    props?: LoadingOverLayProps\n  ) => CSSInterpolation | TemplateStringsArray;\n};\n\nconst styles: Styles = {\n  wrapper: (state: OverflowCSS) => ({\n    position: 'relative',\n    ...state,\n  }),\n  overlay(state: TransitionStatus, props?: LoadingOverLayProps) {\n    return {\n      position: 'absolute',\n      height: '100%',\n      width: '100%',\n      top: '0px',\n      left: '0px',\n      display: 'flex',\n      textAlign: 'center',\n      fontSize: '1.2em',\n      color: '#FFF',\n      backgroundColor: 'rgba(0, 0, 0, 0.7)',\n      zIndex: 800,\n      transition: `opacity ${props?.fadeSpeed ?? 500}ms ease-in`,\n      opacity: state === 'entering' || state === 'entered' ? 1 : 0,\n    };\n  },\n  content: () => ({\n    margin: 'auto',\n  }),\n  spinner: () => ({\n    position: 'relative',\n    margin: '0px auto 10px auto',\n    width: '50px',\n    maxHeight: '100%',\n    '&:before': {\n      content: '\"\"',\n      display: 'block',\n      paddingTop: '100%',\n    },\n    '& svg': {\n      animation: `${rotate360} 2s linear infinite`,\n      height: '100%',\n      transformOrigin: 'center center',\n      width: '100%',\n      position: 'absolute',\n      top: '0',\n      bottom: '0',\n      left: '0',\n      right: '0',\n      margin: 'auto',\n      '& circle': {\n        animation: `${spinnerDash} 1.5s ease-in-out infinite`,\n        strokeDasharray: '1,200',\n        strokeDashoffset: 0,\n        strokeLinecap: 'round',\n        stroke: '#FFF',\n      },\n    },\n  }),\n};\n\nexport default styles;\n","import React, { createRef, forwardRef, PureComponent } from 'react';\nimport { CSSTransition } from 'react-transition-group';\nimport { css, CSSInterpolation, cx } from '@emotion/css';\nimport { TransitionStatus } from 'react-transition-group/Transition';\n\nimport Spinner, { SpinnerProps } from './components/Spinner';\n\nimport STYLES, { Styles } from './styles';\nimport {\n  LoadingOverLayProps,\n  LoadingOverlayState,\n  OverflowCSS,\n} from './LoadingOverlayTypes';\n\nexport { LoadingOverLayProps } from './LoadingOverlayTypes';\n\nclass LoadingOverlayWrapperBase extends PureComponent<\n  LoadingOverLayProps,\n  LoadingOverlayState\n> {\n  static displayName = 'LoadingOverlay';\n\n  wrapperEl: HTMLElement | null | undefined = null;\n\n  overlayRef = createRef<HTMLDivElement>();\n\n  state = { overflowCSS: undefined };\n\n  componentDidMount() {\n    this.wrapperEl = this.overlayRef.current?.parentElement;\n    if (this.wrapperEl !== null && this.wrapperEl !== undefined) {\n      const wrapperStyle = window.getComputedStyle(this.wrapperEl);\n      const overflowCSS = (['overflow', 'overflowX', 'overflowY'] as Array<\n        keyof OverflowCSS\n      >).reduce<OverflowCSS>((m, i) => {\n        if (wrapperStyle[i] !== 'visible') m[i] = 'hidden';\n        return m;\n      }, {} as OverflowCSS);\n      this.setState({ overflowCSS });\n    }\n  }\n\n  componentDidUpdate(prevProps: LoadingOverLayProps) {\n    const { active } = this.props;\n    if (active !== prevProps.active && this.wrapperEl) {\n      this.wrapperEl.scrollTop = 0;\n    }\n  }\n\n  /**\n   * Return an emotion css object for a given element key\n   * If a custom style was provided via props, run it with\n   * the base css obj.\n   */\n  getStyles = (\n    key: keyof Styles,\n    providedState?: OverflowCSS | TransitionStatus\n  ) => {\n    const { styles = {} } = this.props;\n    const base = STYLES[key](providedState, this.props);\n    const custom: Styles[keyof Styles] = (styles as Styles)[key] ?? false;\n    if (!custom) return base;\n    return (typeof custom === 'function'\n      ? custom(base, this.props)\n      : custom) as CSSInterpolation | TemplateStringsArray;\n  };\n\n  /**\n   * Convenience cx wrapper to add prefix classes to each of the child\n   * elements for styling purposes.\n   */\n  cx = (names: string | Array<string | false | undefined>, ...args: any) => {\n    const { classNamePrefix = '_loading_overlay_' } = this.props;\n    const arr = Array.isArray(names) ? names : [names];\n    return cx(\n      ...arr.map(name => (name ? `${classNamePrefix}${name}` : '')),\n      ...args\n    );\n  };\n\n  render() {\n    const { overflowCSS } = this.state;\n    const {\n      children,\n      className,\n      onClick,\n      active,\n      fadeSpeed = 500,\n      spinner = true,\n      text,\n      innerRef,\n    } = this.props;\n\n    return (\n      <div\n        data-testid=\"wrapper\"\n        ref={innerRef}\n        className={this.cx(\n          ['wrapper', active && 'wrapper--active'],\n          css(\n            this.getStyles(\n              'wrapper',\n              active ? overflowCSS : undefined\n            ) as CSSInterpolation\n          ),\n          className\n        )}\n      >\n        <CSSTransition\n          in={active}\n          classNames=\"_loading-overlay-transition\"\n          timeout={fadeSpeed!}\n          unmountOnExit\n        >\n          {state => (\n            <div\n              ref={this.overlayRef}\n              data-testid=\"overlay\"\n              className={this.cx(\n                'overlay',\n                css(this.getStyles('overlay', state) as CSSInterpolation)\n              )}\n              onClick={onClick}\n            >\n              <div\n                className={this.cx(\n                  'content',\n                  css(this.getStyles('content') as CSSInterpolation)\n                )}\n              >\n                {spinner &&\n                  (typeof spinner === 'boolean' ? (\n                    <Spinner\n                      cx={this.cx}\n                      getStyles={this.getStyles as SpinnerProps['getStyles']}\n                    />\n                  ) : (\n                    spinner\n                  ))}\n                {text}\n              </div>\n            </div>\n          )}\n        </CSSTransition>\n        {children}\n      </div>\n    );\n  }\n}\n\nconst LoadingOverlayWrapper = forwardRef<HTMLDivElement, LoadingOverLayProps>(\n  (props, ref) => <LoadingOverlayWrapperBase innerRef={ref} {...props} />\n);\n\nexport default LoadingOverlayWrapper;\n"],"names":["Spinner","props","React","className","cx","css","getStyles","viewBox","cy","r","fill","strokeWidth","strokeMiterlimit","rotate360","keyframes","spinnerDash","styles","wrapper","state","position","overlay","height","width","top","left","display","textAlign","fontSize","color","backgroundColor","zIndex","transition","fadeSpeed","opacity","content","margin","spinner","maxHeight","paddingTop","animation","transformOrigin","bottom","right","strokeDasharray","strokeDashoffset","strokeLinecap","stroke","LoadingOverlayWrapperBase","createRef","overflowCSS","undefined","key","providedState","_this","base","STYLES","custom","names","classNamePrefix","arr","Array","isArray","args","map","name","componentDidMount","wrapperEl","this","overlayRef","current","_this$overlayRef$curr","parentElement","wrapperStyle","window","getComputedStyle","reduce","m","i","setState","componentDidUpdate","prevProps","active","scrollTop","render","children","onClick","text","ref","innerRef","CSSTransition","classNames","timeout","unmountOnExit","_this2","PureComponent","forwardRef"],"mappings":"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"}